"""
module to deal with getting data from a capture file

capture files should be plain text files with each NMEA 0183 sentence
on it's own line
"""

import logging
import os

import ais
import nmea


AISLOGGER = logging.getLogger(__name__)


def open_file_generator(filepath):
    """
    open a file line by line using a generator

    Args:
        filepath(str): path to the file

    Yields:
        line(str): a line from the open file
    """
    with open(filepath, 'r') as infile:
        for line in infile:
            if line == '\n' or line == '\r\n':
                continue
            yield line


def read_from_file(filepath, outpath, debug=False,
                   jsonoutput=True, geojsonoutput=True, csvoutput=True,
                   tsvoutput=False,
                   kmloutput=False, kmzoutput=True):
    """
    read AIS NMEA sentences from a text file and save to various output formats

    Note:
        a text file containing stats and a basic summary
        is generated by default

    Args:
        filepath(str): full path to the input file containing NMEA sentences
        outpath(str): path to save to excluding file extensions
        debug(bool): create a json lines file containing
                     all the individual messages
                     decoded with the original payloads
        jsonoutput(bool): save output to json file
        geojsonoutput(bool): save output to geojson file
        csvoutput(bool): save output to csv file
        kmloutput(bool): save output to kml file
        kmzoutput(bool): save output to kmz file
    """
    if not os.path.exists(outpath):
        AISLOGGER.info('output path does not exist creating directories')
        os.makedirs(outpath)
    AISLOGGER.info('processed output will be saved in %s', outpath)
    AISLOGGER.info('reading nmea sentences from - %s', filepath)
    messagelist = []
    aistracker = ais.AISTracker()
    nmeatracker = nmea.NMEAtracker()
    for line in open_file_generator(filepath):
        try:
            payload = nmeatracker.process_sentence(line)
            if payload:
                msg = aistracker.process_message(payload)
                if debug:
                    decodedmsg = {}
                    decodedmsg['payload'] = payload
                    decodedmsg.update(msg.__dict__)
                    messagelist.append(decodedmsg)
        except (nmea.NMEAInvalidSentence, nmea.NMEACheckSumFailed,
                ais.UnknownMessageType, ais.InvalidMMSI) as err:
            AISLOGGER.debug(str(err))
            continue
        except IndexError:
            AISLOGGER.debug('no data on line')
            continue
    stnstats = aistracker.tracker_stats()
    sentencestats = nmeatracker.nmea_stats()
    AISLOGGER.debug('saving summary to summary.txt')
    summary = ais.create_summary_text({'AIS Stats': stnstats,
                                       'NMEA Stats': sentencestats,
                                       'Capture File': filepath})
    with open(os.path.join(outpath, 'summary.txt'), 'w') as textsummary:
        textsummary.write(summary)
    print(summary)
    if jsonoutput:
        joutdict = {}
        joutdict['NMEA Stats'] = sentencestats
        joutdict['AIS Stats'] = stnstats
        joutdict['AIS Stations'] = aistracker.all_station_info()
        ais.write_json_file(joutdict,
                            os.path.join(outpath, 'vessel-data.json'))
    if geojsonoutput:
        aistracker.create_geojson_map(os.path.join(outpath, 'map.geojson'))
    if csvoutput or tsvoutput:
        outputdata = aistracker.create_table_data()
        if csvoutput:
            ais.write_csv_file(outputdata,
                               os.path.join(outpath, 'vessel-data.csv'))
        if tsvoutput:
            ais.write_csv_file(outputdata,
                               os.path.join(outpath, 'vessel-data.tsv'),
                               dialect='excel-tab')
    if kmloutput:
        aistracker.create_kml_map(os.path.join(outpath, 'map.kml'),
                                  kmzoutput=False)
    if kmzoutput:
        aistracker.create_kml_map(os.path.join(outpath, 'map.kmz'),
                                  kmzoutput=True)
    if debug:
        ais.write_json_lines(messagelist,
                             os.path.join(outpath,
                                          'ais-messages.jsonl'))
    AISLOGGER.info('Finished')
